package dao;

import static dao.DAOUtility.fermeturesSilencieuses;
import static dao.DAOUtility.initialisationRequetePreparee;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

import beans.Course;
import beans.User;

public class UserCourseDaoImpl implements UserCourseDao {

	private DAOFactory daoFactory;
	
	private static final String SQL_INSERT = "INSERT INTO user_course (username , courseID) VALUES (? , ?)";
	private static final String SQL_SELECT_USER_COURSES = "SELECT * FROM course WHERE courseID IN (SELECT courseID FROM user_course WHERE username = ?) ORDER BY courseName";
	private static final String SQL_SELECT_COURSE_USERS	 = "SELECT * FROM user WHERE username IN (SELECT username FROM user_course WHERE courseID = ?) ORDER BY username";
	private static final String SQL_DELETE_BY_USERNAME = "DELETE FROM user_course WHERE username = ?";
	private static final String SQL_DELETE_BY_COURSEID = "DELETE FROM user_course WHERE courseID = ?";
	private static final String SQL_DELETE =  "DELETE FROM user_course WHERE username = ? AND courseID = ?";

	UserCourseDaoImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}

	@Override
	public void create(String username, int courseID) throws DAOException {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;

		try {
			connexion = daoFactory.getConnection();
			preparedStatement = initialisationRequetePreparee(connexion,
					SQL_INSERT, true, username, courseID);
			int statut = preparedStatement.executeUpdate();
			if (statut == 0) {
				throw new DAOException(
						"Failed to create user-course association. No row added");
			}
			
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			fermeturesSilencieuses(autoGeneratedValues, preparedStatement,
					connexion);
		}
	}

	@Override
	public void delete(int username, int courseID) throws DAOException {
		Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE, true, username, courseID );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete user-course association, no row deleted." );
            } else {
            	//course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
		
	}

	@Override
	public void deleteByUsername(String username) throws DAOException {
		Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_BY_USERNAME, true, username );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete user-group association by username, no row deleted." );
            } else {
            	//course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
		
	}

	@Override
	public void deleteByCourseID(int courseID) throws DAOException {
		Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_BY_COURSEID, true, courseID );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete user-course association by courseID, no row deleted." );
            } else {
            	//course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
		
	}

	@Override
	public List<Course> listUserCourses(String username) throws DAOException {
		Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Course> courses = new ArrayList<Course>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee(connection, SQL_SELECT_USER_COURSES,false, username );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                courses.add( mapCourse( resultSet ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connection );
        }

        return courses;
	}

	

	@Override
	public List<User> listCourseUsers(int courseID) throws DAOException {
		Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<User> users = new ArrayList<User>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee(connection, SQL_SELECT_COURSE_USERS,false, courseID );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                users.add( mapUser( resultSet ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connection );
        }

        return users;
	}

	
	private Course mapCourse(ResultSet resultSet)throws SQLException {
		Course course = new Course();
		course.setCourseID(resultSet.getInt("courseID"));
		course.setCourseName(resultSet.getString("courseName"));
		course.setCourseYear(resultSet.getInt("courseYear"));
		course.setCourseDescription(resultSet.getString("courseDescription"));
		course.setSchedule(resultSet.getString("schedule"));
		return course;
	}
	
	private static User mapUser(ResultSet resultSet) throws SQLException {
		
		User user = new User();
		user.setUsername(resultSet.getString("username"));
		user.setAddress(resultSet.getString("address"));
		user.setBirthDate( new DateTime( resultSet.getTimestamp("birthDate")));
		user.setEmail(resultSet.getString("email"));
		user.setFirstName(resultSet.getString("firstName"));
		user.setLastName(resultSet.getString("lastName"));
		user.setPassword(resultSet.getString("password"));
		user.setPhone(resultSet.getString("phone"));
		user.setPhotoURL(resultSet.getString("photoURL"));
		user.setPromotion(resultSet.getString("promotion"));
		user.setRegDate( new DateTime( resultSet.getTimestamp( "regDate" ) ));
		user.setSex(resultSet.getInt("sex"));
		return user;
	}
	
}
