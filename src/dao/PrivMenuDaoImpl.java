package dao;

import static dao.DAOUtility.fermeturesSilencieuses;
import static dao.DAOUtility.initialisationRequetePreparee;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import beans.Priv;

public class PrivMenuDaoImpl implements PrivMenuDao {

    private DAOFactory daoFactory;

    PrivMenuDaoImpl( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    private static final String SQL_INSERT                = "INSERT INTO priv_menu (menuPath , privID) VALUES (? , ?)";
    private static final String SQL_SELECT_MENUPATH_PRIVS = "SELECT * FROM Priv WHERE privID IN (SELECT privID FROM priv_menu WHERE menuPath = ?) ORDER BY privName";
    private static final String SQL_SELECT_PRIV_MENUPATHS = "SELECT menuPath FROM priv_menu WHERE privID = ? ORDER BY groupName";
    private static final String SQL_DELETE_BY_MENUPATH    = "DELETE FROM priv_menu WHERE menuPath = ?";
    private static final String SQL_DELETE_BY_PRIVID      = "DELETE FROM priv_menu WHERE privID = ?";
    private static final String SQL_DELETE                = "DELETE FROM priv_menu WHERE menuPath = ? AND privID = ?";

    @Override
    public void create( int menuPath, int privID ) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion,
                    SQL_INSERT, true, menuPath, privID );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException(
                        "Failed to create privilege-menuPath association. No row added" );
            }

        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( autoGeneratedValues, preparedStatement,
                    connexion );
        }
    }

    @Override
    public void delete( int menuPath, int privID ) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE, true, menuPath, privID );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete privilege-menuPath association, no row deleted." );
            } else {
                // course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
    }

    @Override
    public void deleteByMenuPath( int menuPath ) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_BY_MENUPATH, true, menuPath );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete menuPath-privilege association by groupID, no row deleted." );
            } else {
                // course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
    }

    @Override
    public void deleteByPrivID( int privID ) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_BY_PRIVID, true, privID );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete privilege-menuPath association by groupID, no row deleted." );
            } else {
                // course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
    }

    @Override
    public List<Priv> listMenuPathPrivs( int menuPath ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Priv> privs = new ArrayList<Priv>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connection, SQL_SELECT_MENUPATH_PRIVS, false, menuPath );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                privs.add( mapPriv( resultSet ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connection );
        }

        return privs;
    }

    @Override
    public List<Integer> listPrivMenuPaths( int privID ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Integer> menuPaths = new ArrayList<Integer>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connection, SQL_SELECT_PRIV_MENUPATHS, false, privID );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                menuPaths.add( resultSet.getInt( "menuPath" ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connection );
        }

        return menuPaths;
    }

    private static Priv mapPriv( ResultSet resultSet ) throws SQLException {

        Priv priv = new Priv();
        priv.setPrivID( resultSet.getInt( "privID" ) );
        priv.setPrivName( resultSet.getString( "privName" ) );
        priv.setPrivDescription( resultSet.getString( "privDescription" ) );
        return priv;
    }

}
