package dao;

import static dao.DAOUtility.fermeturesSilencieuses;
import static dao.DAOUtility.initialisationRequetePreparee;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import beans.Group;
import beans.Priv;

public class GroupPrivDaoImpl implements GroupPrivDao {

	private DAOFactory daoFactory;

	GroupPrivDaoImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}

	private static final String SQL_INSERT = "INSERT INTO Group_Priv (groupID , privID) VALUES (? , ?)";
	private static final String SQL_SELECT_GROUP_PRIVS = "SELECT * FROM Priv WHERE privID IN (SELECT privID FROM Group_Priv WHERE groupID = ?) ORDER BY privName";
	private static final String SQL_SELECT_PRIV_GROUPS = "SELECT * FROM web_app_db.Group WHERE groupID IN (SELECT groupID FROM Group_Priv WHERE privID = ?) ORDER BY groupName";
	private static final String SQL_DELETE_BY_GROUPID = "DELETE FROM Group_Priv WHERE groupID = ?";
	private static final String SQL_DELETE_BY_PRIVID = "DELETE FROM Group_Priv WHERE privID = ?";
	private static final String SQL_DELETE =  "DELETE FROM Group_Priv WHERE groupID = ? AND privID = ?";
	
	
	@Override
	public void create(int groupID, int privID) throws DAOException {
		Connection connexion = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;

		try {
			connexion = daoFactory.getConnection();
			preparedStatement = initialisationRequetePreparee(connexion,
					SQL_INSERT, true, groupID, privID);
			int statut = preparedStatement.executeUpdate();
			if (statut == 0) {
				throw new DAOException(
						"Failed to create privilege-group association. No row added");
			}
			
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			fermeturesSilencieuses(autoGeneratedValues, preparedStatement,
					connexion);
		}
	}

	@Override
	public void delete(int groupID, int privID) throws DAOException {
		Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE, true, groupID, privID );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete privilege-group association, no row deleted." );
            } else {
            	//course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
		
	}

	@Override
	public List<Priv> listGroupPrivs(int groupID) throws DAOException {
		Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Priv> privs = new ArrayList<Priv>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee(connection, SQL_SELECT_GROUP_PRIVS,false, groupID );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                privs.add( mapPriv( resultSet ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connection );
        }

        return privs;
	}

	@Override
	public List<Group> listPrivGroups(int privID) throws DAOException {
		Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<Group> groups = new ArrayList<Group>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee(connection, SQL_SELECT_PRIV_GROUPS,false, privID );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                groups.add( mapGroup( resultSet ) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connection );
        }

        return groups;
	}

	@Override
	public void deleteByGroupID(int groupID) throws DAOException {
		Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_BY_GROUPID, true, groupID );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete user-privilege association by groupID, no row deleted." );
            } else {
            	//course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
	}

	@Override
	public void deleteByPrivID(int privID) throws DAOException {
		Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_BY_PRIVID, true, privID );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete privilege-group association by groupID, no row deleted." );
            } else {
            	//course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
		
	}
	
	private static Group mapGroup(ResultSet resultSet) throws SQLException {
		
		Group group = new Group();
		group.setGroupID(resultSet.getInt("groupID"));
		group.setGroupName(resultSet.getString("groupName"));
		group.setGroupDescription(resultSet.getString("groupDescription"));
		return group;
	}
	
	private static Priv mapPriv(ResultSet resultSet) throws SQLException {
		
		Priv priv = new Priv();
		priv.setPrivID(resultSet.getInt("privID"));
		priv.setPrivName(resultSet.getString("privName"));
		priv.setPrivDescrition(resultSet.getString("privDescription"));
		return priv;
	}
	
}
