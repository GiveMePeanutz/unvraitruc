package dao;


import static dao.DAOUtility.fermeturesSilencieuses;
import static dao.DAOUtility.initialisationRequetePreparee;






import java.sql.Array;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;














import beans.Course;
import beans.User;

public class CourseDaoImpl implements CourseDao {

	private DAOFactory daoFactory;
	
	private static final String SQL_SELECT 				= "SELECT courseID, courseName, courseYear, courseDescription, courseschedule FROM Course ORDER BY courseID";
	private static final String SQL_SELECT_BY_COURSENAME	= "SELECT  courseName, courseYear, courseDescription, courseschedule FROM Course WHERE courseID = ?";
	private static final String SQL_INSERT 				= "INSERT INTO Course ( courseName, courseYear, courseDescription, courseschedule) VALUES ( ?, ?, ?, ?)";
	private static final String SQL_INSERT_COURSE_USER 	= "INSERT INTO user_course (username , courseName) VALUES (? , ?)";
	private static final String SQL_DELETE_BY_COURSENAME 	= "DELETE FROM Course WHERE courseName = ?";
	private static final String SQL_SELECT_COURSE_USERS = "SELECT username FROM user WHERE username IN (SELECT username FROM user_course WHERE courseName = ?) ORDER BY username";
	private static final String SQL_DELETE_FROM_USERCOURSE_BY_COURSENAME  = "DELETE FROM user_course WHERE courseName = ?";
	
	
	CourseDaoImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	@Override
	public void create(Course course) throws DAOException {
		Connection connexion = null;
		PreparedStatement preparedStatement1 = null;
		PreparedStatement preparedStatement2 = null;
		ResultSet autoGeneratedValues1 = null;

		try {
			connexion = daoFactory.getConnection();
			preparedStatement1 = initialisationRequetePreparee(connexion,
					SQL_INSERT, true, course.getCourseID(), course.getCourseName(), course.getCourseYear(), course.getDescription(), course.getSchedule());
			int statut1 = preparedStatement1.executeUpdate();
			if (statut1 == 0) {
				throw new DAOException(
						"Failed to create client. No row added");
			}
			autoGeneratedValues1 = preparedStatement1.getGeneratedKeys();
			if (autoGeneratedValues1.next()) {
				course.setCourseID(autoGeneratedValues1.getInt(1));
			} else {
				throw new DAOException(
						"Failed to create course in DB, no courseID auto-generated returned.");
			}
			
			
			
			
			for (String username : course.getUsernames()) {
				preparedStatement2 = initialisationRequetePreparee( connexion,
	                    SQL_INSERT_COURSE_USER, true, username, course.getCourseID() );
	            int statut2 = preparedStatement2.executeUpdate();
	            if ( statut2 == 0 ) {
	                throw new DAOException(
	                        "Failed to create user-course association. No row added" );
	            }
			}
			
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			fermeturesSilencieuses(autoGeneratedValues1, preparedStatement1,
					connexion);
			fermeturesSilencieuses(preparedStatement2,
					connexion);
		}
	}

	@Override
	public Course find(long courseID) throws DAOException {
		return find(SQL_SELECT_BY_COURSEID, courseID);
	}

	@Override
	public List<Course> list() throws DAOException {
		Connection connection = null;
        PreparedStatement preparedStatement = null;
        PreparedStatement preparedStatement2 = null;
        ResultSet resultSet = null;
        ResultSet resultSet2 = null;
        List<Course> courses = new ArrayList<Course>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = connection.prepareStatement( SQL_SELECT );
            resultSet = preparedStatement.executeQuery();
            preparedStatement2 = connection.prepareStatement( SQL_SELECT );
            resultSet2 = preparedStatement2.executeQuery();
            while ( resultSet.next() ) {
                courses.add( map( resultSet , resultSet2) );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connection );
        }

        return courses;
	}

	@Override
	public void delete(Course course) throws DAOException {
		Connection connexion = null;
        PreparedStatement preparedStatement = null;

        try {
            connexion = daoFactory.getConnection();
            preparedStatement = initialisationRequetePreparee( connexion, SQL_DELETE_BY_COURSEID, true, course.getCourseID() );
            int statut = preparedStatement.executeUpdate();
            if ( statut == 0 ) {
                throw new DAOException( "Failed to delete course, no row deleted." );
            } else {
            	//course.setICourseID( null );
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( preparedStatement, connexion );
        }
	}
	
	private Course find( String sql, Object... objets ) throws DAOException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Course course = null;

        try {
            /* Récupération d'une connection depuis la Factory */
            connection = daoFactory.getConnection();
            /*
             * Préparation de la requête avec les objets passés en arguments
             * (ici, uniquement un id) et exécution.
             */
            preparedStatement = initialisationRequetePreparee( connection, sql, false, objets );
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données retournée dans le ResultSet */
            if ( resultSet.next() ) {
            	course = map( resultSet );
            	course
            }
        } catch ( SQLException e ) {
            throw new DAOException( e );
        } finally {
            fermeturesSilencieuses( resultSet, preparedStatement, connection );
        }

        return course;
    }
	
	
	private static Course map(ResultSet resultSet, ResultSet resultSet2) throws SQLException {
		
		Course course = new Course();
		course.setCourseID(resultSet.getInt("courseID"));
		course.setCourseName(resultSet.getString("courseName"));
		course.setCourseYear(resultSet.getInt("courseYear"));
		course.setCourseDescription(resultSet.getString("courseDescription"));
		course.setSchedule(resultSet.getString("schedule"));
		Array usernames=resultSet2.getArray("username");
		course.setUsers((String[])usernames.getArray());
		return course;
	}

}
